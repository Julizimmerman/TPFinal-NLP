"""Orquestador especializado para informaci√≥n meteorol√≥gica."""
from typing import Dict, Any
from langgraph.graph import StateGraph, END
from ..schemas import PlanExecute
from ..config import LLM_EXECUTOR
from ..tools.weather import get_weather, geocode, get_weekly_summary
from ..memory import memory
from langchain.prompts import ChatPromptTemplate
from langchain.agents import create_tool_calling_agent, AgentExecutor

# Herramientas espec√≠ficas de Weather
WEATHER_TOOLS = [
    get_weather,
    geocode,
    get_weekly_summary
]

# Prompt especializado para Weather
WEATHER_SPECIALIST_PROMPT = ChatPromptTemplate.from_template("""
Eres un especialista en informaci√≥n meteorol√≥gica y pron√≥sticos del tiempo.

**Capacidades que tienes:**
- üå§Ô∏è Consultar clima actual de cualquier ubicaci√≥n
- üìç Obtener coordenadas geogr√°ficas de ciudades
- üìä Proporcionar res√∫menes semanales del tiempo
- üå°Ô∏è Informaci√≥n detallada de temperatura, humedad, viento
- üåßÔ∏è Pron√≥sticos de lluvia y condiciones clim√°ticas

**PROTOCOLO DE CONSULTA:**
1. **Ubicaci√≥n**: Si el usuario no especifica ubicaci√≥n, pregunta por ella
2. **Tipo de consulta**: Determina si quiere clima actual, pron√≥stico o resumen semanal
3. **Detalles √∫tiles**: Proporciona informaci√≥n pr√°ctica como consejos de vestimenta

**Ejemplos de interpretaci√≥n:**
- "¬øC√≥mo est√° el clima?" ‚Üí Preguntar por ubicaci√≥n
- "Clima en Madrid" ‚Üí Consultar clima actual de Madrid
- "¬øVa a llover ma√±ana en Barcelona?" ‚Üí Pron√≥stico para Barcelona
- "Pron√≥stico de la semana en Par√≠s" ‚Üí Resumen semanal Par√≠s

**RESPUESTAS √öTILES:**
- Incluye temperatura, condiciones, viento, humedad
- Da consejos pr√°cticos ("lleva paraguas", "usa abrigo")
- Usa emojis para hacer la informaci√≥n m√°s visual

**Contexto de conversaci√≥n:**
{chat_history}

**Usuario:** {input}

{agent_scratchpad}
""")


async def weather_orchestrator_node(state: PlanExecute):
    """Orquestador especializado que maneja todas las consultas meteorol√≥gicas."""
    
    user_input = state.get("input", "")
    session_id = state.get("session_id")
    
    print(f"üå§Ô∏è [WEATHER_ORCHESTRATOR] Procesando: {user_input[:50]}...")
    
    # Crear agente especializado en Weather
    agent = create_tool_calling_agent(
        llm=LLM_EXECUTOR,
        tools=WEATHER_TOOLS,
        prompt=WEATHER_SPECIALIST_PROMPT
    )
    
    agent_executor = AgentExecutor(
        agent=agent,
        tools=WEATHER_TOOLS,
        verbose=True,
        max_iterations=3,
        early_stopping_method="generate",
        handle_parsing_errors=True
    )
    
    try:
        # Obtener contexto de conversaci√≥n
        chat_history = "Esta es una nueva conversaci√≥n."
        if session_id:
            chat_history = memory.get_context_for_planning(session_id, max_messages=5)
        
        # Ejecutar agente Weather
        result = await agent_executor.ainvoke({
            "input": user_input,
            "chat_history": chat_history
        })
        
        response = result.get("output", "No se pudo obtener informaci√≥n meteorol√≥gica.")
        print(f"üå§Ô∏è [WEATHER_ORCHESTRATOR] Respuesta: {response[:100]}...")
        
        return {"response": response}
        
    except Exception as e:
        error_msg = f"‚ùå Error en Weather: {str(e)}"
        print(f"üå§Ô∏è [WEATHER_ORCHESTRATOR] {error_msg}")
        return {"response": error_msg} 