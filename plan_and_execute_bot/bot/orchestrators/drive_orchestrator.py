"""Orquestador especializado para gesti√≥n de Google Drive."""
from typing import Dict, Any
from langgraph.graph import StateGraph, END
from ..schemas import PlanExecute
from ..config import LLM_EXECUTOR
from ..tools.drive import search_files, get_file_metadata, download_file, upload_file, move_file, delete_file
from ..memory import memory
from langchain.prompts import ChatPromptTemplate
from langchain.agents import create_tool_calling_agent, AgentExecutor

# Herramientas espec√≠ficas de Drive
DRIVE_TOOLS = [
    search_files,
    get_file_metadata,
    download_file,
    upload_file,
    move_file,
    delete_file
]

# Prompt especializado para Drive
DRIVE_SPECIALIST_PROMPT = ChatPromptTemplate.from_template("""
Eres un especialista en gesti√≥n de archivos y documentos usando Google Drive.

**Capacidades que tienes:**
- üîç Buscar archivos por nombre, tipo o contenido
- üìÅ Obtener informaci√≥n detallada de archivos
- ‚¨áÔ∏è Descargar archivos desde Drive
- ‚¨ÜÔ∏è Subir archivos a Drive
- üìÇ Mover archivos entre carpetas
- üóëÔ∏è Eliminar archivos y carpetas

**PROTOCOLO DE B√öSQUEDA:**
- Usa t√©rminos espec√≠ficos para buscar archivos
- Si el usuario menciona "documento", "presentaci√≥n", "hoja de c√°lculo", incluye esos t√©rminos
- Para archivos recientes, usa filtros de fecha
- Para archivos compartidos, especifica el tipo de b√∫squeda

**Ejemplos de interpretaci√≥n:**
- "Busca mi presentaci√≥n sobre ventas" ‚Üí Buscar archivos con "presentaci√≥n" y "ventas"
- "¬øD√≥nde est√° el presupuesto?" ‚Üí Buscar archivos con "presupuesto"
- "Archivos de este mes" ‚Üí Buscar con filtro de fecha actual

**IMPORTANTE:**
- Siempre confirma antes de eliminar archivos
- Proporciona detalles √∫tiles sobre los archivos encontrados
- Si hay m√∫ltiples resultados, ayuda al usuario a identificar el correcto

**Contexto de conversaci√≥n:**
{chat_history}

**Usuario:** {input}

{agent_scratchpad}
""")

async def drive_orchestrator_node(state: PlanExecute):
    """Orquestador especializado que maneja todas las tareas de Google Drive."""
    
    user_input = state.get("input", "")
    session_id = state.get("session_id")
    
    print(f"üìÅ [DRIVE_ORCHESTRATOR] Procesando: {user_input[:50]}...")
    
    # Crear agente especializado en Drive
    agent = create_tool_calling_agent(
        llm=LLM_EXECUTOR,
        tools=DRIVE_TOOLS,
        prompt=DRIVE_SPECIALIST_PROMPT
    )
    
    agent_executor = AgentExecutor(
        agent=agent,
        tools=DRIVE_TOOLS,
        verbose=True,
        max_iterations=5,
        early_stopping_method="generate",
        handle_parsing_errors=True
    )
    
    try:
        # Obtener contexto de conversaci√≥n
        chat_history = "Esta es una nueva conversaci√≥n."
        if session_id:
            chat_history = memory.get_context_for_planning(session_id, max_messages=5)
        
        # Ejecutar agente Drive
        result = await agent_executor.ainvoke({
            "input": user_input,
            "chat_history": chat_history
        })
        
        response = result.get("output", "No se pudo procesar la solicitud de Drive.")
        print(f"üìÅ [DRIVE_ORCHESTRATOR] Respuesta: {response[:100]}...")
        
        return {"response": response}
        
    except Exception as e:
        error_msg = f"‚ùå Error en Drive: {str(e)}"
        print(f"üìÅ [DRIVE_ORCHESTRATOR] {error_msg}")
        return {"response": error_msg} 