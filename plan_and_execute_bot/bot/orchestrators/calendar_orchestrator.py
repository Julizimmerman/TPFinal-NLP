"""Orquestador especializado para gesti√≥n de Google Calendar."""
from typing import Dict, Any
from langgraph.graph import StateGraph, END
from ..schemas import PlanExecute
from ..config import LLM_EXECUTOR
from ..tools.calendar import list_calendars, list_events, get_event, create_event, update_event, delete_event, find_free_slot
from ..memory import memory
from langchain.prompts import ChatPromptTemplate
from langchain.agents import create_tool_calling_agent, AgentExecutor

# Herramientas espec√≠ficas de Calendar
CALENDAR_TOOLS = [
    list_calendars,
    list_events,
    get_event,
    create_event,
    update_event,
    delete_event,
    find_free_slot
]

# Prompt especializado para Calendar
CALENDAR_SPECIALIST_PROMPT = ChatPromptTemplate.from_template("""
Eres un especialista en gesti√≥n de calendario y eventos usando Google Calendar.

**Capacidades que tienes:**
- üìÖ Crear eventos y reuniones con fecha, hora y detalles
- üìã Listar eventos programados por fecha o rango
- üîç Buscar eventos espec√≠ficos
- ‚úèÔ∏è Editar eventos existentes
- ‚ùå Eliminar eventos
- üÜì Encontrar horarios libres para agendar reuniones
- üìä Gestionar m√∫ltiples calendarios

**PROTOCOLO PARA CREAR EVENTOS:**
Si el usuario quiere crear un evento, necesitas:
1. **T√≠tulo/Asunto** del evento
2. **Fecha** (hoy, ma√±ana, fecha espec√≠fica)
3. **Hora** de inicio (y duraci√≥n si es posible)
4. **Ubicaci√≥n** (opcional)
5. **Descripci√≥n** adicional (opcional)

**Ejemplos de interpretaci√≥n:**
- "Reuni√≥n con cliente ma√±ana a las 3" ‚Üí Crear evento para ma√±ana 15:00
- "Cita m√©dica el viernes 10:30" ‚Üí Crear evento viernes pr√≥ximo 10:30
- "Recordar cumplea√±os de Mar√≠a el 15" ‚Üí Crear evento d√≠a 15

**MANEJO DE FECHAS:**
- "Hoy" = fecha actual
- "Ma√±ana" = fecha actual + 1 d√≠a  
- "La pr√≥xima semana" = semana siguiente
- "El viernes" = pr√≥ximo viernes

**Contexto de conversaci√≥n:**
{chat_history}

**Usuario:** {input}

{agent_scratchpad}
""")

async def calendar_orchestrator_node(state: PlanExecute):
    """Orquestador especializado que maneja todas las tareas de Google Calendar."""
    
    user_input = state.get("input", "")
    session_id = state.get("session_id")
    
    print(f"üìÖ [CALENDAR_ORCHESTRATOR] Procesando: {user_input[:50]}...")
    
    # Crear agente especializado en Calendar
    agent = create_tool_calling_agent(
        llm=LLM_EXECUTOR,
        tools=CALENDAR_TOOLS,
        prompt=CALENDAR_SPECIALIST_PROMPT
    )
    
    agent_executor = AgentExecutor(
        agent=agent,
        tools=CALENDAR_TOOLS,
        verbose=True,
        max_iterations=5,
        early_stopping_method="generate",
        handle_parsing_errors=True
    )
    
    try:
        # Obtener contexto de conversaci√≥n
        chat_history = "Esta es una nueva conversaci√≥n."
        if session_id:
            chat_history = memory.get_context_for_planning(session_id, max_messages=5)
        
        # Ejecutar agente Calendar
        result = await agent_executor.ainvoke({
            "input": user_input,
            "chat_history": chat_history
        })
        
        response = result.get("output", "No se pudo procesar la solicitud de Calendar.")
        print(f"üìÖ [CALENDAR_ORCHESTRATOR] Respuesta: {response[:100]}...")
        
        return {"response": response}
        
    except Exception as e:
        error_msg = f"‚ùå Error en Calendar: {str(e)}"
        print(f"üìÖ [CALENDAR_ORCHESTRATOR] {error_msg}")
        return {"response": error_msg} 